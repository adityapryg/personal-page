import { b as createAstro, c as createComponent, r as renderTemplate, d as addAttribute, a as renderComponent, m as maybeRenderHead, e as renderSlot, s as spreadAttributes, f as createTransitionScope, g as renderHead } from './astro/server_BLBFWlNj.mjs';
import 'kleur/colors';
/* empty css                          */
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';
import { S as SITE } from './consts_4qx2RGZz.mjs';

const $$Astro$4 = createAstro("https://adityapryg.my.id");
const $$ViewTransitions = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$4, $$props, $$slots);
  Astro2.self = $$ViewTransitions;
  const { fallback = "animate" } = Astro2.props;
  return renderTemplate`<meta name="astro-view-transitions-enabled" content="true"><meta name="astro-view-transitions-fallback"${addAttribute(fallback, "content")}>`;
}, "C:/laragon/www/adityaprayoga/node_modules/astro/components/ViewTransitions.astro", void 0);

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$3 = createAstro("https://adityapryg.my.id");
const $$Head = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$3, $$props, $$slots);
  Astro2.self = $$Head;
  const canonicalURL = new URL(Astro2.url.pathname, Astro2.site);
  const { title, description, image = "/blog-placeholder-1.jpg" } = Astro2.props;
  return renderTemplate(_a$1 || (_a$1 = __template$1(['<!-- Global Metadata --><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>\u270D\uFE0F</text></svg>"><meta name="generator"', '><!-- Canonical URL --><link rel="canonical"', "><!-- Primary Meta Tags --><title>", '</title><meta name="title"', '><meta name="description"', '><!-- Open Graph / Facebook --><meta property="og:type" content="website"><meta property="og:url"', '><meta property="og:title"', '><meta property="og:description"', '><meta property="og:image"', '><!-- Twitter --><meta property="twitter:card" content="summary_large_image"><meta property="twitter:url"', '><meta property="twitter:title"', '><meta property="twitter:description"', '><meta property="twitter:image"', '><!-- PageFind --><link href="/pagefind/pagefind-ui.css" rel="stylesheet"><script src="/pagefind/pagefind-ui.js"><\/script>', '<script>\n  function init() {\n    preloadTheme();\n    onScroll();\n    animate();\n    updateThemeButtons();\n    addCopyCodeButtons();\n    setGiscusTheme();\n\n    const backToTop = document.getElementById("back-to-top");\n    backToTop?.addEventListener("click", (event) => scrollToTop(event));\n\n    const backToPrev = document.getElementById("back-to-prev");\n    backToPrev?.addEventListener("click", () => window.history.back());\n\n    const lightThemeButton = document.getElementById("light-theme-button");\n    lightThemeButton?.addEventListener("click", () => {\n      localStorage.setItem("theme", "light");\n      toggleTheme(false);\n      updateThemeButtons();\n    });\n\n    const darkThemeButton = document.getElementById("dark-theme-button");\n    darkThemeButton?.addEventListener("click", () => {\n      localStorage.setItem("theme", "dark");\n      toggleTheme(true);\n      updateThemeButtons();\n    });\n\n    const systemThemeButton = document.getElementById("system-theme-button");\n    systemThemeButton?.addEventListener("click", () => {\n      localStorage.setItem("theme", "system");\n      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);\n      updateThemeButtons();\n    });\n\n    window\n      .matchMedia("(prefers-color-scheme: dark)")\n      .addEventListener("change", (event) => {\n        if (localStorage.theme === "system") {\n          toggleTheme(event.matches);\n        }\n      });\n\n    document.addEventListener("scroll", onScroll);\n  }\n\n  function updateThemeButtons() {\n    const theme = localStorage.getItem("theme");\n    const lightThemeButton = document.getElementById("light-theme-button");\n    const darkThemeButton = document.getElementById("dark-theme-button");\n    const systemThemeButton = document.getElementById("system-theme-button");\n\n    function removeActiveButtonTheme(button) {\n      button?.classList.remove("bg-black/5");\n      button?.classList.remove("dark:bg-white/5");\n    }\n\n    function addActiveButtonTheme(button) {\n      button?.classList.add("bg-black/5");\n      button?.classList.add("dark:bg-white/5");\n    }\n\n    removeActiveButtonTheme(lightThemeButton);\n    removeActiveButtonTheme(darkThemeButton);\n    removeActiveButtonTheme(systemThemeButton);\n\n    if (theme === "light") {\n      addActiveButtonTheme(lightThemeButton);\n    } else if (theme === "dark") {\n      addActiveButtonTheme(darkThemeButton);\n    } else {\n      addActiveButtonTheme(systemThemeButton);\n    }\n  }\n\n  function animate() {\n    const animateElements = document.querySelectorAll(".animate");\n\n    animateElements.forEach((element, index) => {\n      setTimeout(() => {\n        element.classList.add("show");\n      }, index * 100);\n    });\n  }\n\n  function onScroll() {\n    if (window.scrollY > 0) {\n      document.documentElement.classList.add("scrolled");\n    } else {\n      document.documentElement.classList.remove("scrolled");\n    }\n  }\n\n  function scrollToTop(event) {\n    event.preventDefault();\n    window.scrollTo({\n      top: 0,\n      behavior: "smooth",\n    });\n  }\n\n  function toggleTheme(dark) {\n    const css = document.createElement("style");\n\n    css.appendChild(\n      document.createTextNode(\n        `* {\n             -webkit-transition: none !important;\n             -moz-transition: none !important;\n             -o-transition: none !important;\n             -ms-transition: none !important;\n             transition: none !important;\n          }\n        `\n      )\n    );\n\n    document.head.appendChild(css);\n\n    if (dark) {\n      document.documentElement.classList.add("dark");\n    } else {\n      document.documentElement.classList.remove("dark");\n    }\n\n    window.getComputedStyle(css).opacity;\n    document.head.removeChild(css);\n\n    setGiscusTheme();\n  }\n\n  function preloadTheme() {\n    const userTheme = localStorage.theme;\n\n    if (userTheme === "light" || userTheme === "dark") {\n      toggleTheme(userTheme === "dark");\n    } else {\n      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);\n    }\n  }\n\n  function addCopyCodeButtons() {\n    let copyButtonLabel = "\u{1F4CB}";\n    let codeBlocks = Array.from(document.querySelectorAll("pre"));\n\n    async function copyCode(codeBlock, copyButton) {\n      const codeText = codeBlock.innerText;\n      const buttonText = copyButton.innerText;\n      const textToCopy = codeText.replace(buttonText, "");\n\n      await navigator.clipboard.writeText(textToCopy);\n      copyButton.innerText = "\u2705";\n\n      setTimeout(() => {\n        copyButton.innerText = copyButtonLabel;\n      }, 2000);\n    }\n\n    for (let codeBlock of codeBlocks) {\n      const wrapper = document.createElement("div");\n      wrapper.style.position = "relative";\n\n      const copyButton = document.createElement("button");\n      copyButton.innerText = copyButtonLabel;\n      copyButton.classList = "copy-code";\n\n      codeBlock.setAttribute("tabindex", "0");\n      codeBlock.appendChild(copyButton);\n\n      codeBlock.parentNode.insertBefore(wrapper, codeBlock);\n      wrapper.appendChild(codeBlock);\n\n      copyButton?.addEventListener("click", async () => {\n        await copyCode(codeBlock, copyButton);\n      });\n    }\n  }\n\n  const setGiscusTheme = () => {\n    const giscus = document.querySelector(".giscus-frame");\n\n    const isDark = document.documentElement.classList.contains("dark");\n\n    if (giscus) {\n      const url = new URL(giscus.src);\n      url.searchParams.set("theme", isDark ? "dark" : "light");\n      giscus.src = url.toString();\n    }\n  };\n\n  document.addEventListener("DOMContentLoaded", () => init());\n  document.addEventListener("astro:after-swap", () => init());\n  preloadTheme();\n<\/script>'], ['<!-- Global Metadata --><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>\u270D\uFE0F</text></svg>"><meta name="generator"', '><!-- Canonical URL --><link rel="canonical"', "><!-- Primary Meta Tags --><title>", '</title><meta name="title"', '><meta name="description"', '><!-- Open Graph / Facebook --><meta property="og:type" content="website"><meta property="og:url"', '><meta property="og:title"', '><meta property="og:description"', '><meta property="og:image"', '><!-- Twitter --><meta property="twitter:card" content="summary_large_image"><meta property="twitter:url"', '><meta property="twitter:title"', '><meta property="twitter:description"', '><meta property="twitter:image"', '><!-- PageFind --><link href="/pagefind/pagefind-ui.css" rel="stylesheet"><script src="/pagefind/pagefind-ui.js"><\/script>', '<script>\n  function init() {\n    preloadTheme();\n    onScroll();\n    animate();\n    updateThemeButtons();\n    addCopyCodeButtons();\n    setGiscusTheme();\n\n    const backToTop = document.getElementById("back-to-top");\n    backToTop?.addEventListener("click", (event) => scrollToTop(event));\n\n    const backToPrev = document.getElementById("back-to-prev");\n    backToPrev?.addEventListener("click", () => window.history.back());\n\n    const lightThemeButton = document.getElementById("light-theme-button");\n    lightThemeButton?.addEventListener("click", () => {\n      localStorage.setItem("theme", "light");\n      toggleTheme(false);\n      updateThemeButtons();\n    });\n\n    const darkThemeButton = document.getElementById("dark-theme-button");\n    darkThemeButton?.addEventListener("click", () => {\n      localStorage.setItem("theme", "dark");\n      toggleTheme(true);\n      updateThemeButtons();\n    });\n\n    const systemThemeButton = document.getElementById("system-theme-button");\n    systemThemeButton?.addEventListener("click", () => {\n      localStorage.setItem("theme", "system");\n      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);\n      updateThemeButtons();\n    });\n\n    window\n      .matchMedia("(prefers-color-scheme: dark)")\n      .addEventListener("change", (event) => {\n        if (localStorage.theme === "system") {\n          toggleTheme(event.matches);\n        }\n      });\n\n    document.addEventListener("scroll", onScroll);\n  }\n\n  function updateThemeButtons() {\n    const theme = localStorage.getItem("theme");\n    const lightThemeButton = document.getElementById("light-theme-button");\n    const darkThemeButton = document.getElementById("dark-theme-button");\n    const systemThemeButton = document.getElementById("system-theme-button");\n\n    function removeActiveButtonTheme(button) {\n      button?.classList.remove("bg-black/5");\n      button?.classList.remove("dark:bg-white/5");\n    }\n\n    function addActiveButtonTheme(button) {\n      button?.classList.add("bg-black/5");\n      button?.classList.add("dark:bg-white/5");\n    }\n\n    removeActiveButtonTheme(lightThemeButton);\n    removeActiveButtonTheme(darkThemeButton);\n    removeActiveButtonTheme(systemThemeButton);\n\n    if (theme === "light") {\n      addActiveButtonTheme(lightThemeButton);\n    } else if (theme === "dark") {\n      addActiveButtonTheme(darkThemeButton);\n    } else {\n      addActiveButtonTheme(systemThemeButton);\n    }\n  }\n\n  function animate() {\n    const animateElements = document.querySelectorAll(".animate");\n\n    animateElements.forEach((element, index) => {\n      setTimeout(() => {\n        element.classList.add("show");\n      }, index * 100);\n    });\n  }\n\n  function onScroll() {\n    if (window.scrollY > 0) {\n      document.documentElement.classList.add("scrolled");\n    } else {\n      document.documentElement.classList.remove("scrolled");\n    }\n  }\n\n  function scrollToTop(event) {\n    event.preventDefault();\n    window.scrollTo({\n      top: 0,\n      behavior: "smooth",\n    });\n  }\n\n  function toggleTheme(dark) {\n    const css = document.createElement("style");\n\n    css.appendChild(\n      document.createTextNode(\n        \\`* {\n             -webkit-transition: none !important;\n             -moz-transition: none !important;\n             -o-transition: none !important;\n             -ms-transition: none !important;\n             transition: none !important;\n          }\n        \\`\n      )\n    );\n\n    document.head.appendChild(css);\n\n    if (dark) {\n      document.documentElement.classList.add("dark");\n    } else {\n      document.documentElement.classList.remove("dark");\n    }\n\n    window.getComputedStyle(css).opacity;\n    document.head.removeChild(css);\n\n    setGiscusTheme();\n  }\n\n  function preloadTheme() {\n    const userTheme = localStorage.theme;\n\n    if (userTheme === "light" || userTheme === "dark") {\n      toggleTheme(userTheme === "dark");\n    } else {\n      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);\n    }\n  }\n\n  function addCopyCodeButtons() {\n    let copyButtonLabel = "\u{1F4CB}";\n    let codeBlocks = Array.from(document.querySelectorAll("pre"));\n\n    async function copyCode(codeBlock, copyButton) {\n      const codeText = codeBlock.innerText;\n      const buttonText = copyButton.innerText;\n      const textToCopy = codeText.replace(buttonText, "");\n\n      await navigator.clipboard.writeText(textToCopy);\n      copyButton.innerText = "\u2705";\n\n      setTimeout(() => {\n        copyButton.innerText = copyButtonLabel;\n      }, 2000);\n    }\n\n    for (let codeBlock of codeBlocks) {\n      const wrapper = document.createElement("div");\n      wrapper.style.position = "relative";\n\n      const copyButton = document.createElement("button");\n      copyButton.innerText = copyButtonLabel;\n      copyButton.classList = "copy-code";\n\n      codeBlock.setAttribute("tabindex", "0");\n      codeBlock.appendChild(copyButton);\n\n      codeBlock.parentNode.insertBefore(wrapper, codeBlock);\n      wrapper.appendChild(codeBlock);\n\n      copyButton?.addEventListener("click", async () => {\n        await copyCode(codeBlock, copyButton);\n      });\n    }\n  }\n\n  const setGiscusTheme = () => {\n    const giscus = document.querySelector(".giscus-frame");\n\n    const isDark = document.documentElement.classList.contains("dark");\n\n    if (giscus) {\n      const url = new URL(giscus.src);\n      url.searchParams.set("theme", isDark ? "dark" : "light");\n      giscus.src = url.toString();\n    }\n  };\n\n  document.addEventListener("DOMContentLoaded", () => init());\n  document.addEventListener("astro:after-swap", () => init());\n  preloadTheme();\n<\/script>'])), addAttribute(Astro2.generator, "content"), addAttribute(canonicalURL, "href"), title, addAttribute(title, "content"), addAttribute(description, "content"), addAttribute(Astro2.url, "content"), addAttribute(title, "content"), addAttribute(description, "content"), addAttribute(new URL(image, Astro2.url), "content"), addAttribute(Astro2.url, "content"), addAttribute(title, "content"), addAttribute(description, "content"), addAttribute(new URL(image, Astro2.url), "content"), renderComponent($$result, "ViewTransitions", $$ViewTransitions, {}));
}, "C:/laragon/www/adityaprayoga/src/components/Head.astro", void 0);

const $$Container = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${maybeRenderHead()}<div class="mx-auto max-w-screen-sm px-3">${renderSlot($$result, $$slots["default"])}</div>`;
}, "C:/laragon/www/adityaprayoga/src/components/Container.astro", void 0);

function cn(...inputs) {
  return twMerge(clsx(inputs));
}
function readingTime(html) {
  const textOnly = html.replace(/<[^>]+>/g, "");
  const wordCount = textOnly.split(/\s+/).length;
  const readingTimeMinutes = (wordCount / 200 + 1).toFixed();
  return `${readingTimeMinutes} min read`;
}

const $$Astro$2 = createAstro("https://adityapryg.my.id");
const $$Link = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$Link;
  const {
    href,
    external,
    underline = true,
    group = false,
    ...rest
  } = Astro2.props;
  return renderTemplate`${maybeRenderHead()}<a${addAttribute(href, "href")}${addAttribute(external ? "_blank" : "_self", "target")}${addAttribute(cn(
    "inline-block decoration-black/30 dark:decoration-white/30 hover:decoration-black/50 focus-visible:decoration-black/50 dark:hover:decoration-white/50 dark:focus-visible:decoration-white/50 text-current hover:text-black focus-visible:text-black dark:hover:text-white dark:focus-visible:text-white transition-colors duration-300 ease-in-out",
    underline && "underline underline-offset-[3px]",
    group && "group"
  ), "class")}${spreadAttributes(rest)}> ${renderSlot($$result, $$slots["default"])} </a>`;
}, "C:/laragon/www/adityaprayoga/src/components/Link.astro", void 0);

const $$Header = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${maybeRenderHead()}<header${addAttribute(createTransitionScope($$result, "l7r54iwe"), "data-astro-transition-persist")}> ${renderComponent($$result, "Container", $$Container, {}, { "default": ($$result2) => renderTemplate` <div class="flex flex-wrap justify-between gap-y-2"> ${renderComponent($$result2, "Link", $$Link, { "href": "/", "underline": false }, { "default": ($$result3) => renderTemplate` <div class="font-semibold"> ${SITE.TITLE}&nbsp;🌤️
</div> ` })} <nav class="flex items-center gap-1 text-sm"> ${renderComponent($$result2, "Link", $$Link, { "href": "/blog" }, { "default": ($$result3) => renderTemplate`blog` })} <span> ${`/`} </span> ${renderComponent($$result2, "Link", $$Link, { "href": "/projects" }, { "default": ($$result3) => renderTemplate`projects` })} <span> ${`/`} </span> <button id="magnifying-glass" aria-label="Search" class="flex items-center rounded border border-black/15 bg-neutral-100 px-2 py-1 text-xs transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black focus-visible:bg-black/5 focus-visible:text-black dark:border-white/20 dark:bg-neutral-900 dark:hover:bg-white/5 dark:hover:text-white dark:focus-visible:bg-white/5 dark:focus-visible:text-white"> <svg height="16" stroke-linejoin="round" viewBox="0 0 16 16" width="16" style="color: currentcolor;"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.5 7C3.5 5.067 5.067 3.5 7 3.5C8.933 3.5 10.5 5.067 10.5 7C10.5 7.88461 10.1718 8.69256 9.63058 9.30876L9.30876 9.63058C8.69256 10.1718 7.88461 10.5 7 10.5C5.067 10.5 3.5 8.933 3.5 7ZM9.96544 11.0261C9.13578 11.6382 8.11014 12 7 12C4.23858 12 2 9.76142 2 7C2 4.23858 4.23858 2 7 2C9.76142 2 12 4.23858 12 7C12 8.11014 11.6382 9.13578 11.0261 9.96544L14.0303 12.9697L14.5607 13.5L13.5 14.5607L12.9697 14.0303L9.96544 11.0261Z" fill="currentColor"></path></svg>
&nbsp;Search
</button> </nav> </div> ` })} </header>`;
}, "C:/laragon/www/adityaprayoga/src/components/Header.astro", "self");

const $$BackToTop = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${maybeRenderHead()}<button id="back-to-top" class="group relative flex w-fit flex-nowrap rounded border border-black/15 py-1.5 pl-8 pr-3 transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black focus-visible:bg-black/5 focus-visible:text-black dark:border-white/20 dark:hover:bg-white/5 dark:hover:text-white dark:focus-visible:bg-white/5 dark:focus-visible:text-white"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="absolute left-2 top-1/2 size-4 -translate-y-1/2 rotate-90 fill-none stroke-current stroke-2"> <line x1="5" y1="12" x2="19" y2="12" class="translate-x-2 scale-x-0 transition-transform duration-300 ease-in-out group-hover:translate-x-0 group-hover:scale-x-100 group-focus-visible:translate-x-0 group-focus-visible:scale-x-100"></line> <polyline points="12 5 5 12 12 19" class="translate-x-1 transition-transform duration-300 ease-in-out group-hover:translate-x-0 group-focus-visible:translate-x-0"></polyline> </svg> <div class="text-sm">Back to top</div> </button>`;
}, "C:/laragon/www/adityaprayoga/src/components/BackToTop.astro", void 0);

const $$Footer = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${maybeRenderHead()}<footer class="animate"> ${renderComponent($$result, "Container", $$Container, {}, { "default": ($$result2) => renderTemplate` <div class="relative"> <div class="absolute -top-12 right-0"> ${renderComponent($$result2, "BackToTop", $$BackToTop, {})} </div> </div> <div class="flex items-center justify-between"> <div>&copy; ${(/* @__PURE__ */ new Date()).getFullYear()} • ${SITE.TITLE} 💖</div> <div class="flex flex-wrap items-center gap-1.5"> <button id="light-theme-button" aria-label="Light theme" class="group flex size-9 items-center justify-center rounded border border-black/15 hover:bg-black/5 focus-visible:bg-black/5 dark:border-white/20 dark:hover:bg-white/5 dark:focus-visible:bg-white/5"> <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="transition-colors duration-300 ease-in-out group-hover:animate-pulse group-hover:stroke-black group-focus-visible:animate-pulse group-focus-visible:stroke-black group-hover:dark:stroke-white dark:group-focus-visible:stroke-white"> <circle cx="12" cy="12" r="5"></circle> <line x1="12" y1="1" x2="12" y2="3"></line> <line x1="12" y1="21" x2="12" y2="23"></line> <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line> <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line> <line x1="1" y1="12" x2="3" y2="12"></line> <line x1="21" y1="12" x2="23" y2="12"></line> <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line> <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line> </svg> </button> <button id="dark-theme-button" aria-label="Dark theme" class="group flex size-9 items-center justify-center rounded border border-black/15 hover:bg-black/5 focus-visible:bg-black/5 dark:border-white/20 dark:hover:bg-white/5 dark:focus-visible:bg-white/5"> <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="transition-colors duration-300 ease-in-out group-hover:animate-pulse group-hover:stroke-black group-focus-visible:animate-pulse group-focus-visible:stroke-black group-hover:dark:stroke-white dark:group-focus-visible:stroke-white"> <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path> </svg> </button> <button id="system-theme-button" aria-label="System theme" class="group flex size-9 items-center justify-center rounded border border-black/15 hover:bg-black/5 focus-visible:bg-black/5 dark:border-white/20 dark:hover:bg-white/5 dark:focus-visible:bg-white/5"> <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="transition-colors duration-300 ease-in-out group-hover:animate-pulse group-hover:stroke-black group-focus-visible:animate-pulse group-focus-visible:stroke-black group-hover:dark:stroke-white dark:group-focus-visible:stroke-white"> <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect> <line x1="8" y1="21" x2="16" y2="21"></line> <line x1="12" y1="17" x2="12" y2="21"></line> </svg> </button> </div> </div> ` })} </footer>`;
}, "C:/laragon/www/adityaprayoga/src/components/Footer.astro", void 0);

const $$Astro$1 = createAstro("https://adityapryg.my.id");
const $$Search = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$Search;
  const { id, className, query, uiOptions = {} } = Astro2.props;
  const bundlePath = `${"/"}pagefind/`;
  return renderTemplate`${maybeRenderHead()}<div${addAttribute(id, "id")}${addAttribute([className, "pagefind-init"], "class:list")} data-pagefind-ui${addAttribute(bundlePath, "data-bundle-path")}${addAttribute(query, "data-query")}${addAttribute(JSON.stringify(uiOptions), "data-ui-options")}></div> `;
}, "C:/laragon/www/adityaprayoga/node_modules/astro-pagefind/src/components/Search.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(cooked.slice()) }));
var _a;
const $$PageFind = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["", '<aside data-pagefind-ignore> <div id="backdrop" class="bg-[rgba(0, 0, 0, 0.5] invisible fixed left-0 top-0 z-50 flex h-screen w-full justify-center p-6 backdrop-blur-sm"', '> <div id="pagefind-container" class="m-0 flex h-fit max-h-[80%] w-full max-w-screen-sm flex-col overflow-auto rounded border border-black/15 bg-neutral-100 p-2 px-4 py-3 shadow-lg dark:border-white/20 dark:bg-neutral-900"> ', ' <div class="mr-2 pb-1 pt-4 text-right text-xs dark:prose-invert">\nPress <span class="prose text-xs dark:prose-invert"><kbd class="">Esc</kbd></span> or click anywhere to close\n</div> </div> </div> </aside> <script>\n  const magnifyingGlass = document.getElementById("magnifying-glass");\n  const backdrop = document.getElementById("backdrop");\n\n  function openPagefind() {\n    const searchDiv = document.getElementById("search");\n    const search = searchDiv.querySelector("input");\n    setTimeout(() => {\n      search.focus();\n    }, 0);\n    backdrop?.classList.remove("invisible");\n    backdrop?.classList.add("visible");\n  }\n\n  function closePagefind() {\n    const search = document.getElementById("search");\n    search.value = "";\n    backdrop?.classList.remove("visible");\n    backdrop?.classList.add("invisible");\n  }\n\n  // open pagefind\n  magnifyingGlass?.addEventListener("click", () => {\n    openPagefind();\n  });\n\n  document.addEventListener("keydown", (e) => {\n    if (e.key === "/") {\n      e.preventDefault();\n      openPagefind();\n    } else if ((e.metaKey || e.ctrlKey) && e.key === "k") {\n      e.preventDefault();\n      openPagefind();\n    }\n  });\n\n  // close pagefind\n  document.addEventListener("keydown", (e) => {\n    if (e.key === "Escape" || e.keyCode === 27) {\n      closePagefind();\n    }\n  });\n\n  // close pagefind when searched result(link) clicked\n  document.addEventListener("click", (event) => {\n    if (event.target.classList.contains("pagefind-ui__result-link")) {\n      closePagefind();\n    }\n  });\n\n  backdrop?.addEventListener("click", (event) => {\n    if (!event.target.closest("#pagefind-container")) {\n      closePagefind();\n    }\n  });\n\n  // prevent form submission\n  const form = document.getElementById("form");\n  form?.addEventListener("submit", (event) => {\n    event.preventDefault();\n  });\n<\/script> '])), maybeRenderHead(), addAttribute(createTransitionScope($$result, "3snakcvo"), "data-astro-transition-persist"), renderComponent($$result, "Search", $$Search, { "id": "search", "className": "pagefind-ui", "uiOptions": {
    showImages: false,
    excerptLength: 15,
    resetStyles: false
  } }));
}, "C:/laragon/www/adityaprayoga/src/components/PageFind.astro", "self");

const $$Astro = createAstro("https://adityapryg.my.id");
const $$Layout = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Layout;
  const { title, description } = Astro2.props;
  return renderTemplate`<html lang="en"> <head>${renderComponent($$result, "Head", $$Head, { "title": `${title} | ${SITE.TITLE}`, "description": description })}${renderHead()}</head> <body> ${renderComponent($$result, "Header", $$Header, {})} <main> ${renderSlot($$result, $$slots["default"])} </main> ${renderComponent($$result, "Footer", $$Footer, {})} ${renderComponent($$result, "PageFind", $$PageFind, {})} </body></html>`;
}, "C:/laragon/www/adityaprayoga/src/layouts/Layout.astro", void 0);

export { $$Container as $, $$Layout as a, $$Link as b, readingTime as r };
